/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface ThermostatCard {
      'hass': any;
      'setConfig': (config: any) => void;
    }
  }

  interface HTMLThermostatCardElement extends StencilComponents.ThermostatCard, HTMLStencilElement {}

  var HTMLThermostatCardElement: {
    prototype: HTMLThermostatCardElement;
    new (): HTMLThermostatCardElement;
  };
  interface HTMLElementTagNameMap {
    'thermostat-card': HTMLThermostatCardElement;
  }
  interface ElementTagNameMap {
    'thermostat-card': HTMLThermostatCardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'thermostat-card': JSXElements.ThermostatCardAttributes;
    }
  }
  namespace JSXElements {
    export interface ThermostatCardAttributes extends HTMLAttributes {
      'hass'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ThermostatDial {
      '_config': {
    title: string,
    radius: number,
    pending: number,
    tick_degrees: number,
    diameter: number,
    num_ticks: number,
    step: number,
    idle_zone: number,
    ticks_outer_radius: number,
    ticks_inner_radius: number,
    offset_degrees: number,
    chevron_size: number,
    control: any,
  };
      'chevron_size': number;
      'control': any;
      'diameter': number;
      'hvac_state': any;
      'max_value': number;
      'min_value': number;
      'num_ticks': number;
      'pending': number;
      'stateAttribute': any;
    }
  }

  interface HTMLThermostatDialElement extends StencilComponents.ThermostatDial, HTMLStencilElement {}

  var HTMLThermostatDialElement: {
    prototype: HTMLThermostatDialElement;
    new (): HTMLThermostatDialElement;
  };
  interface HTMLElementTagNameMap {
    'thermostat-dial': HTMLThermostatDialElement;
  }
  interface ElementTagNameMap {
    'thermostat-dial': HTMLThermostatDialElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'thermostat-dial': JSXElements.ThermostatDialAttributes;
    }
  }
  namespace JSXElements {
    export interface ThermostatDialAttributes extends HTMLAttributes {
      '_config'?: {
    title: string,
    radius: number,
    pending: number,
    tick_degrees: number,
    diameter: number,
    num_ticks: number,
    step: number,
    idle_zone: number,
    ticks_outer_radius: number,
    ticks_inner_radius: number,
    offset_degrees: number,
    chevron_size: number,
    control: any,
  };
      'chevron_size'?: number;
      'control'?: any;
      'diameter'?: number;
      'hvac_state'?: any;
      'max_value'?: number;
      'min_value'?: number;
      'num_ticks'?: number;
      'onOnUpdate'?: (event: CustomEvent) => void;
      'pending'?: number;
      'stateAttribute'?: any;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;